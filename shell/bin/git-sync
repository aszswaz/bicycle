#!/bin/zsh

# 对本地 git 仓库和关联的所有远程仓库进行同步操作，比如推送到所有的远程仓库，本地仓库删除一个分支时，所有的远程仓库的分支也一并删除等
# author: aszswaz
# date: 2022-03-08 10:23:22

# 脚本中对用户开放的函数调用
FUNCTIONS=(push init dbranch docpush)
# 传入参数
ARGS=($@)
# 本地的笔记仓库地址
LOCAL_REPOSITORY="${HOME}/document/notebook"
# 脚本所在文件夹
SCRIPT_DIR=$(dirname $0)
# 整个存储库所在文件夹
STORE_DIR=$(dirname $SCRIPT_DIR)
# 工作目录
WORKING_DIR=$(pwd)
# 解析传入参数
declare -A OPTIONS

# 加载外部脚本
source "${BICYCLE_CONFIG}/aszswaz.sh"

# git push 指令可能出现网络超时的情况，通过 timeout 限制此类操作的超时时间
alias err_exit="exit 1"
alias timeout="timeout -s 9 --preserve-status --foreground --verbose 30s"
alias curl="curl --disable -s --fail-with-body"

# 入口函数
function main() {
    # 解析传入参数
    FUNCTION=""
    for ((i = 1; i <= ${#ARGS}; i++)); do
        arg=${ARGS[$i]}
        # 解析参数
        if [[ ${arg:0:2} = "--" ]]; then
            arg=${arg:2:${#arg}}
            ((i++))
            OPTIONS[${arg}]=${ARGS[$i]}
        else
            # 需要脚本执行的函数
            FUNCTION=$arg
        fi
    done
    unset arg

    # 执行用户指定的函数
    if [[ $FUNCTIONS =~ $FUNCTION ]]; then
        $FUNCTION
    else
        # 用户指定的函数名称错误
        echo "Unknown action $FUNCTION." >&2
        err_exit 1
    fi
}

# 推送代码到远程仓库
function push() {
    git_checked
    # 修改字符串的分隔符
    IFS=$'\n'
    # 获取远程仓库列表
    array=($(git remote))
    echo "${#array} remote repositories detected."

    # 要推送的本地分支和目标的远程分支
    local branch=$OPTIONS[branch]
    echo "Branch to push: $branch."

    for depository in ${array}; do
        # 将代码提交到git的所有仓库
        echo "Pushing to remote repository: ${depository}."
        # 执行推送操作，通过timeout执行git，可以在git推送超时的情况下，强制KILL
        timeout git push $depository $branch
        timeout git push --tags $depository $branch
    done
    # IFS 变是全局共享的，用完需要重置
    unset IFS
    echo "Push done!"
}

# 删除指定的本地分支和所有远程仓库对应的分支
function dbranch() {
    git_checked
    local IFS=$'\n'
    local branch=$OPTIONS[branch]
    if [[ $branch == "" ]]; then
        echo "Please specify the branch to delete." >&2
        err_exit
    elif [[ $branch == "master" ]]; then
        echo "The master branch cannot be delete."
        err_exit
    else
        echo "Delete branch ${branch}."
        git branch -d "$branch"
    fi

    # 获取关联所有仓库
    local repositories=($(git remote))
    echo "${#repositories} remote repositories detected."

    # 删除所有远程仓库的同名分支
    for item in ${repositories}; do
        timeout git push --delete ${repositories} ${branch}
    done
}

# 推送本地的笔记仓库到远程仓库
function docpush() {
    cd $LOCAL_REPOSITORY
    # 提交一个版本
    git add -A
    vared -c -p "Please input commit message: " message
    [[ $message == "" ]] && message="default"
    git commit -m "$message"
    # 调用 push 函数，提交到所有远程仓库
    push
}

# 将当前文件夹初始化为 git 存储库，并且与 gitee、github、gitea 关联
# github: https://docs.github.com/cn/rest/reference/repos#create-a-repository-for-the-authenticated-user
# gitee: https://gitee.com/api/v5/swagger#/postV5UserRepos
function init() {
    # 让用户输入仓库的描述信息
    cache_file="/dev/shm/git-sync-describe.txt"
    vi $cache_file
    describe=$(<$cache_file)
    rm $cache_file
    # 以当前文件夹名称作为仓库名称
    repository_name=$(basename $WORKING_DIR)
    # 描述信息输出到 Readme.md
    echo "# 简介\n\n$describe" >>Readme.md

    # 先初始化本地仓库
    {
        git init &&
            git add -A &&
            git commit -m "$describe"
    } || {
        return 1
    }

    # 创建 github 存储库
    result=$(curl -XPOST https://api.github.com/user/repos -u "${GITHUB_ACCOUNT}:${GITHUB_TOKEN}" -H "Content-Type: application/json" -d "{\"name\": \"$repository_name\", \"description\": \"${describe}\"}")
    if [[ $(echo "$result" | jq -r '.errors?') != "null" ]]; then
        # github 存储库创建失败
        echo "github:\n" $(echo $result | jq '.errors.message')
        err_exit
    fi
    git remote add github $(echo "$result" | jq -r ".ssh_url")
    git push --set-upstream github master
    echo "Github repository url:" $(echo "$result" | jq -r ".url")

    # 创建 gitee 存储库
    result=$(curl -XPOST https://gitee.com/api/v5/user/repos -H 'Content-Type: application/json' -d "{\"access_token\": \"${GITEE_TOKEN}\", \"name\": \"${repository_name}\", \"description\": \"${describe}\"}")
    if [[ $(echo "$result" | jq -r '.error?') != 'null' ]]; then
        # gitee 的错误消息不是固定的一种格式，所以直接输出所有响应结果
        echo "Gitee:\n" $(echo $result | jq)
        err_exit
    fi
    git remote add gitee $(echo "$result" | jq -r ".ssh_url")
    git push --set-upstream gitee master
    echo "Gitee repository url:" $(echo "$result" | jq -r '.url')

    # 在我的 gitea 服务器创建仓库
    result=$(curl -XPOST "https://gitea.aszswaz.cn/api/v1/user/repos?token=${GITEA_TOKEN}" -H "Content-Type: application/json" -d "{\"name\": \"$repository_name\", \"description\": \"$describe\"}")
    if [[ $(echo $result | jq '.message?') != 'null' ]]; then
        echo "Gitea:" $(echo "$result" | jq '.message')
        err_exit
    fi
    git remote add gitea $(echo "$result" | jq -r '.ssh_url')
    git push --set-upstream gitea master
    echo "Gitea repository url:" $(echo "$result" | jq -r '.html_url')
}

# 检查文件夹是否为 git 存储库
function git_checked() {
    # 首先检查是否为 git 仓库
    if ! git rev-parse >>/dev/null 2>&1; then
        echo "$(pwd): Not a git repository."
        err_exit 1
    fi
}

main
